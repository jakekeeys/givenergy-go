/*
GivEnergy API Documentation (v1.5.1)

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package givenergy

import (
	"encoding/json"
)

// InlineObject2 struct for InlineObject2
type InlineObject2 struct {
	// The serial number of the smart device.
	SerialNumber string `json:"serial_number"`
	// An alternate name for the smart device.
	Alias *string `json:"alias,omitempty"`
	// The model name of the product.
	ProductName *string `json:"product_name,omitempty"`
	// The name of the product's manufacturer.
	Manufacturer *string `json:"manufacturer,omitempty"`
	OtherData *Json `json:"other_data,omitempty"`
}

// NewInlineObject2 instantiates a new InlineObject2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject2(serialNumber string) *InlineObject2 {
	this := InlineObject2{}
	this.SerialNumber = serialNumber
	return &this
}

// NewInlineObject2WithDefaults instantiates a new InlineObject2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject2WithDefaults() *InlineObject2 {
	this := InlineObject2{}
	return &this
}

// GetSerialNumber returns the SerialNumber field value
func (o *InlineObject2) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetSerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *InlineObject2) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *InlineObject2) GetAlias() string {
	if o == nil || o.Alias == nil {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetAliasOk() (*string, bool) {
	if o == nil || o.Alias == nil {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *InlineObject2) HasAlias() bool {
	if o != nil && o.Alias != nil {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *InlineObject2) SetAlias(v string) {
	o.Alias = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *InlineObject2) GetProductName() string {
	if o == nil || o.ProductName == nil {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetProductNameOk() (*string, bool) {
	if o == nil || o.ProductName == nil {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *InlineObject2) HasProductName() bool {
	if o != nil && o.ProductName != nil {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *InlineObject2) SetProductName(v string) {
	o.ProductName = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *InlineObject2) GetManufacturer() string {
	if o == nil || o.Manufacturer == nil {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetManufacturerOk() (*string, bool) {
	if o == nil || o.Manufacturer == nil {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *InlineObject2) HasManufacturer() bool {
	if o != nil && o.Manufacturer != nil {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *InlineObject2) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetOtherData returns the OtherData field value if set, zero value otherwise.
func (o *InlineObject2) GetOtherData() Json {
	if o == nil || o.OtherData == nil {
		var ret Json
		return ret
	}
	return *o.OtherData
}

// GetOtherDataOk returns a tuple with the OtherData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetOtherDataOk() (*Json, bool) {
	if o == nil || o.OtherData == nil {
		return nil, false
	}
	return o.OtherData, true
}

// HasOtherData returns a boolean if a field has been set.
func (o *InlineObject2) HasOtherData() bool {
	if o != nil && o.OtherData != nil {
		return true
	}

	return false
}

// SetOtherData gets a reference to the given Json and assigns it to the OtherData field.
func (o *InlineObject2) SetOtherData(v Json) {
	o.OtherData = &v
}

func (o InlineObject2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if o.Alias != nil {
		toSerialize["alias"] = o.Alias
	}
	if o.ProductName != nil {
		toSerialize["product_name"] = o.ProductName
	}
	if o.Manufacturer != nil {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if o.OtherData != nil {
		toSerialize["other_data"] = o.OtherData
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject2 struct {
	value *InlineObject2
	isSet bool
}

func (v NullableInlineObject2) Get() *InlineObject2 {
	return v.value
}

func (v *NullableInlineObject2) Set(val *InlineObject2) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject2) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject2(val *InlineObject2) *NullableInlineObject2 {
	return &NullableInlineObject2{value: val, isSet: true}
}

func (v NullableInlineObject2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


