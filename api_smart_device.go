/*
GivEnergy API Documentation (v1.5.1)

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package givenergy

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SmartDeviceApiService SmartDeviceApi service
type SmartDeviceApiService service

type ApiSmartDeviceGetRequest struct {
	ctx _context.Context
	ApiService *SmartDeviceApiService
	page *int32
	pageSize *int32
	authorization *string
	contentType *string
	accept *string
}

// Page number to return
func (r ApiSmartDeviceGetRequest) Page(page int32) ApiSmartDeviceGetRequest {
	r.page = &page
	return r
}
// Number of items to return in a page. Defaults to 15
func (r ApiSmartDeviceGetRequest) PageSize(pageSize int32) ApiSmartDeviceGetRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiSmartDeviceGetRequest) Authorization(authorization string) ApiSmartDeviceGetRequest {
	r.authorization = &authorization
	return r
}
func (r ApiSmartDeviceGetRequest) ContentType(contentType string) ApiSmartDeviceGetRequest {
	r.contentType = &contentType
	return r
}
func (r ApiSmartDeviceGetRequest) Accept(accept string) ApiSmartDeviceGetRequest {
	r.accept = &accept
	return r
}

func (r ApiSmartDeviceGetRequest) Execute() (InlineResponse20017, *_nethttp.Response, error) {
	return r.ApiService.SmartDeviceGetExecute(r)
}

/*
SmartDeviceGet Get Your Smart Devices

List the smart devices registered to your account

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSmartDeviceGetRequest
*/
func (a *SmartDeviceApiService) SmartDeviceGet(ctx _context.Context) ApiSmartDeviceGetRequest {
	return ApiSmartDeviceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InlineResponse20017
func (a *SmartDeviceApiService) SmartDeviceGetExecute(r ApiSmartDeviceGetRequest) (InlineResponse20017, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20017
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartDeviceApiService.SmartDeviceGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smart-device"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSmartDeviceIdGetRequest struct {
	ctx _context.Context
	ApiService *SmartDeviceApiService
	id int32
	authorization *string
	contentType *string
	accept *string
}

func (r ApiSmartDeviceIdGetRequest) Authorization(authorization string) ApiSmartDeviceIdGetRequest {
	r.authorization = &authorization
	return r
}
func (r ApiSmartDeviceIdGetRequest) ContentType(contentType string) ApiSmartDeviceIdGetRequest {
	r.contentType = &contentType
	return r
}
func (r ApiSmartDeviceIdGetRequest) Accept(accept string) ApiSmartDeviceIdGetRequest {
	r.accept = &accept
	return r
}

func (r ApiSmartDeviceIdGetRequest) Execute() (InlineResponse20019, *_nethttp.Response, error) {
	return r.ApiService.SmartDeviceIdGetExecute(r)
}

/*
SmartDeviceIdGet Get Smart Device by ID

Get a smart device's information

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the smart device.
 @return ApiSmartDeviceIdGetRequest
*/
func (a *SmartDeviceApiService) SmartDeviceIdGet(ctx _context.Context, id int32) ApiSmartDeviceIdGetRequest {
	return ApiSmartDeviceIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InlineResponse20019
func (a *SmartDeviceApiService) SmartDeviceIdGetExecute(r ApiSmartDeviceIdGetRequest) (InlineResponse20019, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20019
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartDeviceApiService.SmartDeviceIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smart-device/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSmartDevicePostRequest struct {
	ctx _context.Context
	ApiService *SmartDeviceApiService
	inlineObject2 *InlineObject2
	authorization *string
	contentType *string
	accept *string
}

func (r ApiSmartDevicePostRequest) InlineObject2(inlineObject2 InlineObject2) ApiSmartDevicePostRequest {
	r.inlineObject2 = &inlineObject2
	return r
}
func (r ApiSmartDevicePostRequest) Authorization(authorization string) ApiSmartDevicePostRequest {
	r.authorization = &authorization
	return r
}
func (r ApiSmartDevicePostRequest) ContentType(contentType string) ApiSmartDevicePostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiSmartDevicePostRequest) Accept(accept string) ApiSmartDevicePostRequest {
	r.accept = &accept
	return r
}

func (r ApiSmartDevicePostRequest) Execute() (InlineResponse20018, *_nethttp.Response, error) {
	return r.ApiService.SmartDevicePostExecute(r)
}

/*
SmartDevicePost Create Smart Device

Register a new smart device to your account

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSmartDevicePostRequest
*/
func (a *SmartDeviceApiService) SmartDevicePost(ctx _context.Context) ApiSmartDevicePostRequest {
	return ApiSmartDevicePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InlineResponse20018
func (a *SmartDeviceApiService) SmartDevicePostExecute(r ApiSmartDevicePostRequest) (InlineResponse20018, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20018
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartDeviceApiService.SmartDevicePost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smart-device"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject2 == nil {
		return localVarReturnValue, nil, reportError("inlineObject2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	// body params
	localVarPostBody = r.inlineObject2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSmartDeviceSmartDeviceIdDataGetRequest struct {
	ctx _context.Context
	ApiService *SmartDeviceApiService
	smartDeviceId string
	page *int32
	pageSize *int32
	authorization *string
	contentType *string
	accept *string
}

// Page number to return
func (r ApiSmartDeviceSmartDeviceIdDataGetRequest) Page(page int32) ApiSmartDeviceSmartDeviceIdDataGetRequest {
	r.page = &page
	return r
}
// Number of items to return in a page. Defaults to 15
func (r ApiSmartDeviceSmartDeviceIdDataGetRequest) PageSize(pageSize int32) ApiSmartDeviceSmartDeviceIdDataGetRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiSmartDeviceSmartDeviceIdDataGetRequest) Authorization(authorization string) ApiSmartDeviceSmartDeviceIdDataGetRequest {
	r.authorization = &authorization
	return r
}
func (r ApiSmartDeviceSmartDeviceIdDataGetRequest) ContentType(contentType string) ApiSmartDeviceSmartDeviceIdDataGetRequest {
	r.contentType = &contentType
	return r
}
func (r ApiSmartDeviceSmartDeviceIdDataGetRequest) Accept(accept string) ApiSmartDeviceSmartDeviceIdDataGetRequest {
	r.accept = &accept
	return r
}

func (r ApiSmartDeviceSmartDeviceIdDataGetRequest) Execute() (InlineResponse20020, *_nethttp.Response, error) {
	return r.ApiService.SmartDeviceSmartDeviceIdDataGetExecute(r)
}

/*
SmartDeviceSmartDeviceIdDataGet Get Smart Device Data Points by ID

Get a list of a smart device's data points

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartDeviceId The ID of the smart-device.
 @return ApiSmartDeviceSmartDeviceIdDataGetRequest
*/
func (a *SmartDeviceApiService) SmartDeviceSmartDeviceIdDataGet(ctx _context.Context, smartDeviceId string) ApiSmartDeviceSmartDeviceIdDataGetRequest {
	return ApiSmartDeviceSmartDeviceIdDataGetRequest{
		ApiService: a,
		ctx: ctx,
		smartDeviceId: smartDeviceId,
	}
}

// Execute executes the request
//  @return InlineResponse20020
func (a *SmartDeviceApiService) SmartDeviceSmartDeviceIdDataGetExecute(r ApiSmartDeviceSmartDeviceIdDataGetRequest) (InlineResponse20020, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20020
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartDeviceApiService.SmartDeviceSmartDeviceIdDataGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smart-device/{smart-device_id}/data"
	localVarPath = strings.Replace(localVarPath, "{"+"smart-device_id"+"}", _neturl.PathEscape(parameterToString(r.smartDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSmartDeviceSmartDeviceUuidDataPostRequest struct {
	ctx _context.Context
	ApiService *SmartDeviceApiService
	smartDeviceUuid string
	inlineObject3 *InlineObject3
	authorization *string
	contentType *string
	accept *string
}

func (r ApiSmartDeviceSmartDeviceUuidDataPostRequest) InlineObject3(inlineObject3 InlineObject3) ApiSmartDeviceSmartDeviceUuidDataPostRequest {
	r.inlineObject3 = &inlineObject3
	return r
}
func (r ApiSmartDeviceSmartDeviceUuidDataPostRequest) Authorization(authorization string) ApiSmartDeviceSmartDeviceUuidDataPostRequest {
	r.authorization = &authorization
	return r
}
func (r ApiSmartDeviceSmartDeviceUuidDataPostRequest) ContentType(contentType string) ApiSmartDeviceSmartDeviceUuidDataPostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiSmartDeviceSmartDeviceUuidDataPostRequest) Accept(accept string) ApiSmartDeviceSmartDeviceUuidDataPostRequest {
	r.accept = &accept
	return r
}

func (r ApiSmartDeviceSmartDeviceUuidDataPostRequest) Execute() (InlineResponse20021, *_nethttp.Response, error) {
	return r.ApiService.SmartDeviceSmartDeviceUuidDataPostExecute(r)
}

/*
SmartDeviceSmartDeviceUuidDataPost Create Smart Device Data Point

Store a data point against a smart device

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartDeviceUuid
 @return ApiSmartDeviceSmartDeviceUuidDataPostRequest
*/
func (a *SmartDeviceApiService) SmartDeviceSmartDeviceUuidDataPost(ctx _context.Context, smartDeviceUuid string) ApiSmartDeviceSmartDeviceUuidDataPostRequest {
	return ApiSmartDeviceSmartDeviceUuidDataPostRequest{
		ApiService: a,
		ctx: ctx,
		smartDeviceUuid: smartDeviceUuid,
	}
}

// Execute executes the request
//  @return InlineResponse20021
func (a *SmartDeviceApiService) SmartDeviceSmartDeviceUuidDataPostExecute(r ApiSmartDeviceSmartDeviceUuidDataPostRequest) (InlineResponse20021, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20021
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartDeviceApiService.SmartDeviceSmartDeviceUuidDataPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smart-device/{smart_device_uuid}/data"
	localVarPath = strings.Replace(localVarPath, "{"+"smart_device_uuid"+"}", _neturl.PathEscape(parameterToString(r.smartDeviceUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject3 == nil {
		return localVarReturnValue, nil, reportError("inlineObject3 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	// body params
	localVarPostBody = r.inlineObject3
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
