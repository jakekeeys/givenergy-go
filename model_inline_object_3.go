/*
GivEnergy API Documentation (v1.5.1)

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package givenergy

import (
	"encoding/json"
)

// InlineObject3 struct for InlineObject3
type InlineObject3 struct {
	// The date & time that the data point was created
	Time ISO8601Datetime `json:"time"`
	Power int32 `json:"power"`
}

// NewInlineObject3 instantiates a new InlineObject3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject3(time ISO8601Datetime, power int32) *InlineObject3 {
	this := InlineObject3{}
	this.Time = time
	this.Power = power
	return &this
}

// NewInlineObject3WithDefaults instantiates a new InlineObject3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject3WithDefaults() *InlineObject3 {
	this := InlineObject3{}
	return &this
}

// GetTime returns the Time field value
func (o *InlineObject3) GetTime() ISO8601Datetime {
	if o == nil {
		var ret ISO8601Datetime
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *InlineObject3) GetTimeOk() (*ISO8601Datetime, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *InlineObject3) SetTime(v ISO8601Datetime) {
	o.Time = v
}

// GetPower returns the Power field value
func (o *InlineObject3) GetPower() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Power
}

// GetPowerOk returns a tuple with the Power field value
// and a boolean to check if the value has been set.
func (o *InlineObject3) GetPowerOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Power, true
}

// SetPower sets field value
func (o *InlineObject3) SetPower(v int32) {
	o.Power = v
}

func (o InlineObject3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["power"] = o.Power
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject3 struct {
	value *InlineObject3
	isSet bool
}

func (v NullableInlineObject3) Get() *InlineObject3 {
	return v.value
}

func (v *NullableInlineObject3) Set(val *InlineObject3) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject3) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject3(val *InlineObject3) *NullableInlineObject3 {
	return &NullableInlineObject3{value: val, isSet: true}
}

func (v NullableInlineObject3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


